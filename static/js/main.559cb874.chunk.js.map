{"version":3,"sources":["components/TodoList/TodoList.jsx","components/CurrentUser/CurrentUser.jsx","app/loadTodos.js","App.jsx","index.js"],"names":["TodoList","state","query","selectedStatus","statusFilter","todo","completed","this","props","todos","selectUser","checkHandler","className","value","placeholder","onChange","target","setState","filter","title","toLowerCase","includes","map","key","id","type","checked","onClick","userId","React","Component","CurrentUser","users","fetch","then","response","json","catch","user","data","usersFromServer","selectedUser","find","length","name","email","phone","App","selectedUserId","todoId","selectedTodo","todosFromServer","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.559cb874.chunk.js","sourcesContent":["import React from 'react';\nimport './TodoList.scss';\nimport PropTypes from 'prop-types';\n\nexport class TodoList extends React.Component {\n  state = {\n    query: '',\n    selectedStatus: 'all',\n  };\n\n  statusFilter = (todo) => {\n    switch (this.state.selectedStatus) {\n      case 'active':\n        return !todo.completed;\n      case 'completed':\n        return todo.completed;\n      default:\n        return todo;\n    }\n  }\n\n  render() {\n    const { query } = this.state;\n    const { todos, selectUser, checkHandler } = this.props;\n\n    return (\n      <div className=\"TodoList\">\n        <h2>Todos:</h2>\n        <input\n          className=\"TodoList__filter\"\n          value={query}\n          placeholder=\"Filter todos\"\n          onChange={({ target }) => {\n            this.setState({ query: target.value });\n          }}\n        />\n        <select\n          className=\"TodoList__select\"\n          onChange={({ target }) => {\n            this.setState({ selectedStatus: target.value });\n          }}\n        >\n          <option value=\"all\"> all </option>\n          <option value=\"active\"> active </option>\n          <option value=\"completed\"> completed </option>\n        </select>\n\n        <div className=\"TodoList__list-container\">\n          <ul className=\"TodoList__list\">\n            {todos\n              .filter(todo => this.statusFilter(todo))\n              .filter(todo => todo.title\n                && todo.title.toLowerCase().includes(query.toLowerCase()))\n              .map(todo => (\n                <li\n                  key={todo.id}\n                  className={`TodoList__item ${todo.completed\n                    ? 'TodoList__item--checked'\n                    : 'TodoList__item--unchecked'}`}\n                >\n                  <label>\n                    <input\n                      type=\"checkbox\"\n                      checked={todo.completed}\n                      onChange={() => checkHandler(todo.id)}\n                    />\n                    <p>{todo.title}</p>\n                  </label>\n\n                  <button\n                    className=\"\n                    TodoList__user-button\n                    TodoList__user-button--selected\n                    button\n                  \"\n                    type=\"button\"\n                    onClick={() => selectUser(todo.userId)}\n                  >\n                    User&nbsp;#\n                    {todo.userId}\n                  </button>\n                </li>\n              ))}\n          </ul>\n        </div>\n      </div>\n    );\n  }\n}\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    userId: PropTypes.number,\n    title: PropTypes.string,\n    completed: PropTypes.bool,\n  })).isRequired,\n  checkHandler: PropTypes.func.isRequired,\n  selectUser: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport './CurrentUser.scss';\nimport PropTypes from 'prop-types';\nimport { getUsers } from '../../app/loadTodos';\n\nexport class CurrentUser extends React.Component {\n  state = {\n    users: [],\n  };\n\n  componentDidMount() {\n    getUsers()\n      .then((usersFromServer) => {\n        this.setState({\n          users: usersFromServer,\n        });\n      });\n  }\n\n  render() {\n    const { users } = this.state;\n    const { userId } = this.props;\n    const selectedUser = users.find(user => user.id === userId);\n\n    return (\n      <>\n        {(users.length > 0 && selectedUser) ? (\n          <div className=\"CurrentUser\">\n            <h2 className=\"CurrentUser__title\">\n              <span>\n                Selected user:\n                {selectedUser.id}\n              </span>\n            </h2>\n\n            <h3 className=\"CurrentUser__name\">{selectedUser.name}</h3>\n            <p className=\"CurrentUser__email\">{selectedUser.email}</p>\n            <p className=\"CurrentUser__phone\">{selectedUser.phone}</p>\n          </div>\n        ) : '...not found'}\n      </>\n\n    );\n  }\n}\n\nCurrentUser.propTypes = {\n  userId: PropTypes.number.isRequired,\n};\n","export function getTodos() {\n  return fetch('https://mate-api.herokuapp.com/todos')\n    .then(response => response.json())\n    .catch(() => [])\n    .then(todo => todo.data);\n}\n\nexport function getUsers() {\n  return fetch('https://mate-api.herokuapp.com/users')\n    .then(response => response.json())\n    .catch(() => [])\n    .then(user => user.data);\n}\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { getTodos } from './app/loadTodos';\n\nclass App extends React.Component {\n  state = {\n    todos: [],\n    selectedUserId: 0,\n  };\n\n  componentDidMount() {\n    getTodos()\n      .then((todosFromServer) => {\n        this.setState({\n          todos: todosFromServer,\n        });\n      });\n  }\n\n  selectUser = (userId) => {\n    this.setState({\n      selectedUserId: userId,\n    });\n  };\n\n  checkHandler = (todoId) => {\n    const todos = [...this.state.todos];\n    const selectedTodo = todos.find(todo => todo.id === todoId);\n\n    selectedTodo.completed = !selectedTodo.completed;\n    this.setState(state => ({ todos }));\n  }\n\n  render() {\n    const { todos, selectedUserId } = this.state;\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          <TodoList\n            todos={todos}\n            selectUser={this.selectUser}\n            checkHandler={this.checkHandler}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId ? (\n              <div>\n                <button\n                  type=\"button\"\n                  className=\"App__clear-button\"\n                  onClick={() => {\n                    this.setState({ selectedUserId: 0 });\n                  }}\n                >\n                  Clear\n                </button>\n                <CurrentUser userId={selectedUserId} />\n              </div>\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}